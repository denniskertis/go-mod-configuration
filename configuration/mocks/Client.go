// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	messaging "github.com/denniskertis/go-mod-messaging/v42/messaging"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ConfigurationValueExists provides a mock function with given fields: name
func (_m *Client) ConfigurationValueExists(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: configStruct
func (_m *Client) GetConfiguration(configStruct interface{}) (interface{}, error) {
	ret := _m.Called(configStruct)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (interface{}, error)); ok {
		return rf(configStruct)
	}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(configStruct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(configStruct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationKeys provides a mock function with given fields: name
func (_m *Client) GetConfigurationKeys(name string) ([]string, error) {
	ret := _m.Called(name)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationValue provides a mock function with given fields: name
func (_m *Client) GetConfigurationValue(name string) ([]byte, error) {
	ret := _m.Called(name)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationValueByFullPath provides a mock function with given fields: fullPath
func (_m *Client) GetConfigurationValueByFullPath(fullPath string) ([]byte, error) {
	ret := _m.Called(fullPath)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(fullPath)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(fullPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fullPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasConfiguration provides a mock function with given fields:
func (_m *Client) HasConfiguration() (bool, error) {
	ret := _m.Called()

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSubConfiguration provides a mock function with given fields: name
func (_m *Client) HasSubConfiguration(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAlive provides a mock function with given fields:
func (_m *Client) IsAlive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PutConfiguration provides a mock function with given fields: configStruct, overwrite
func (_m *Client) PutConfiguration(configStruct interface{}, overwrite bool) error {
	ret := _m.Called(configStruct, overwrite)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, bool) error); ok {
		r0 = rf(configStruct, overwrite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutConfigurationMap provides a mock function with given fields: _a0, overwrite
func (_m *Client) PutConfigurationMap(_a0 map[string]interface{}, overwrite bool) error {
	ret := _m.Called(_a0, overwrite)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, bool) error); ok {
		r0 = rf(_a0, overwrite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutConfigurationValue provides a mock function with given fields: name, value
func (_m *Client) PutConfigurationValue(name string, value []byte) error {
	ret := _m.Called(name, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(name, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopWatching provides a mock function with given fields:
func (_m *Client) StopWatching() {
	_m.Called()
}

// WatchForChanges provides a mock function with given fields: updateChannel, errorChannel, _a2, waitKey, msgClient
func (_m *Client) WatchForChanges(updateChannel chan<- interface{}, errorChannel chan<- error, _a2 interface{}, waitKey string, msgClient messaging.MessageClient) {
	_m.Called(updateChannel, errorChannel, _a2, waitKey, msgClient)
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
